{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/scientist/Working_Directory/Projects/PortfolioWebsite/developerFolio/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/home/scientist/Working_Directory/Projects/PortfolioWebsite/developerFolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/scientist/Working_Directory/Projects/PortfolioWebsite/developerFolio/src/containers/profile/Profile.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n      {\\n        user(login:\\\"\", \"\\\") { \\n          name\\n          bio\\n          isHireable\\n          avatarUrl\\n          location\\n        }\\n    }\\n      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport GithubProfileCard from \"../../components/githubProfileCard/GithubProfileCard\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport { openSource } from \"../../portfolio\";\nimport Contact from \"../contact/Contact\";\nexport default function Profile() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        prof = _useState2[0],\n        setrepo = _useState2[1];\n\n  function setProfileFunction(array) {\n    setrepo(array);\n  }\n\n  function getProfileData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: \"Bearer \".concat(openSource.githubConvertedToken)\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql(_templateObject(), openSource.githubUserName)\n    }).then(result => {\n      setProfileFunction(result.data.user);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  useEffect(() => {\n    if (openSource.showGithubProfile === \"true\") {\n      getProfileData();\n    }\n  }, []);\n\n  if (openSource.showGithubProfile === \"true\") {\n    return React.createElement(GithubProfileCard, {\n      prof: prof,\n      key: prof.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(Contact, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  }\n}","map":{"version":3,"sources":["/home/scientist/Working_Directory/Projects/PortfolioWebsite/developerFolio/src/containers/profile/Profile.js"],"names":["React","useState","useEffect","GithubProfileCard","ApolloClient","gql","openSource","Contact","Profile","prof","setrepo","setProfileFunction","array","getProfileData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","data","user","catch","error","console","log","showGithubProfile","id"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,oBACRP,QAAQ,CAAC,EAAD,CADA;AAAA;AAAA,QACzBQ,IADyB;AAAA,QACnBC,OADmB;;AAEhC,WAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjCF,IAAAA,OAAO,CAACE,KAAD,CAAP;AACD;;AACD,WAASC,cAAT,GAA0B;AACxB,UAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC9BW,MAAAA,GAAG,EAAE,gCADyB;AAE9BC,MAAAA,OAAO,EAAGC,SAAD,IAAe;AACtBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,mBAAYd,UAAU,CAACe,oBAAvB;AADN;AADU,SAArB;AAKD;AAR6B,KAAjB,CAAf;AAWAP,IAAAA,MAAM,CACHQ,KADH,CACS;AACLA,MAAAA,KAAK,EAAEjB,GAAF,oBAESC,UAAU,CAACiB,cAFpB;AADA,KADT,EAcGC,IAdH,CAcSC,MAAD,IAAY;AAChBd,MAAAA,kBAAkB,CAACc,MAAM,CAACC,IAAP,CAAYC,IAAb,CAAlB;AACD,KAhBH,EAiBGC,KAjBH,CAiBS,UAAUC,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAnBH;AAoBD;;AACD3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,UAAU,CAAC0B,iBAAX,KAAiC,MAArC,EAA6C;AAC3CnB,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,EAJM,CAAT;;AAKA,MAAIP,UAAU,CAAC0B,iBAAX,KAAiC,MAArC,EAA6C;AAC3C,WAAO,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAEvB,IAAzB;AAA+B,MAAA,GAAG,EAAEA,IAAI,CAACwB,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AACF","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GithubProfileCard from \"../../components/githubProfileCard/GithubProfileCard\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport { openSource } from \"../../portfolio\";\nimport Contact from \"../contact/Contact\";\n\nexport default function Profile() {\n  const [prof, setrepo] = useState([]);\n  function setProfileFunction(array) {\n    setrepo(array);\n  }\n  function getProfileData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n      {\n        user(login:\"${openSource.githubUserName}\") { \n          name\n          bio\n          isHireable\n          avatarUrl\n          location\n        }\n    }\n      `,\n      })\n      .then((result) => {\n        setProfileFunction(result.data.user);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  useEffect(() => {\n    if (openSource.showGithubProfile === \"true\") {\n      getProfileData();\n    }\n  }, []);\n  if (openSource.showGithubProfile === \"true\") {\n    return <GithubProfileCard prof={prof} key={prof.id} />;\n  } else {\n    return <Contact />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}