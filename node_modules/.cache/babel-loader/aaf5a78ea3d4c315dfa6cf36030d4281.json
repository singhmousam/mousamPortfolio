{"ast":null,"code":"import _taggedTemplateLiteral from\"/home/scientist/Working_Directory/Projects/PortfolioWebsite/mousamPortfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"/home/scientist/Working_Directory/Projects/PortfolioWebsite/mousamPortfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n      {\\n        user(login:\\\"\",\"\\\") { \\n          name\\n          bio\\n          isHireable\\n          avatarUrl\\n          location\\n        }\\n    }\\n      \"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect}from\"react\";import GithubProfileCard from\"../../components/githubProfileCard/GithubProfileCard\";import ApolloClient,{gql}from\"apollo-boost\";import{openSource}from\"../../portfolio\";import Contact from\"../contact/Contact\";export default function Profile(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),prof=_useState2[0],setrepo=_useState2[1];function setProfileFunction(array){setrepo(array);}function getProfileData(){var client=new ApolloClient({uri:\"https://api.github.com/graphql\",request:function request(operation){operation.setContext({headers:{authorization:\"Bearer \".concat(openSource.githubConvertedToken)}});}});client.query({query:gql(_templateObject(),openSource.githubUserName)}).then(function(result){setProfileFunction(result.data.user);}).catch(function(error){console.log(error);});}useEffect(function(){if(openSource.showGithubProfile===\"true\"){getProfileData();}},[]);if(openSource.showGithubProfile===\"true\"){return/*#__PURE__*/React.createElement(GithubProfileCard,{prof:prof,key:prof.id});}else{return/*#__PURE__*/React.createElement(Contact,null);}}","map":{"version":3,"sources":["/home/scientist/Working_Directory/Projects/PortfolioWebsite/mousamPortfolio/src/containers/profile/Profile.js"],"names":["React","useState","useEffect","GithubProfileCard","ApolloClient","gql","openSource","Contact","Profile","prof","setrepo","setProfileFunction","array","getProfileData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","data","user","catch","error","console","log","showGithubProfile","id"],"mappings":"4rBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,iBAAP,KAA8B,sDAA9B,CACA,MAAOC,CAAAA,YAAP,EAAuBC,GAAvB,KAAkC,cAAlC,CACA,OAASC,UAAT,KAA2B,iBAA3B,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CAEA,cAAe,SAASC,CAAAA,OAAT,EAAmB,eACRP,QAAQ,CAAC,EAAD,CADA,wCACzBQ,IADyB,eACnBC,OADmB,eAEhC,QAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,CACjCF,OAAO,CAACE,KAAD,CAAP,CACD,CACD,QAASC,CAAAA,cAAT,EAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAG,GAAIV,CAAAA,YAAJ,CAAiB,CAC9BW,GAAG,CAAE,gCADyB,CAE9BC,OAAO,CAAE,iBAACC,SAAD,CAAe,CACtBA,SAAS,CAACC,UAAV,CAAqB,CACnBC,OAAO,CAAE,CACPC,aAAa,kBAAYd,UAAU,CAACe,oBAAvB,CADN,CADU,CAArB,EAKD,CAR6B,CAAjB,CAAf,CAWAP,MAAM,CACHQ,KADH,CACS,CACLA,KAAK,CAAEjB,GAAF,mBAESC,UAAU,CAACiB,cAFpB,CADA,CADT,EAcGC,IAdH,CAcQ,SAACC,MAAD,CAAY,CAChBd,kBAAkB,CAACc,MAAM,CAACC,IAAP,CAAYC,IAAb,CAAlB,CACD,CAhBH,EAiBGC,KAjBH,CAiBS,SAAUC,KAAV,CAAiB,CACtBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CAnBH,EAoBD,CACD3B,SAAS,CAAC,UAAM,CACd,GAAII,UAAU,CAAC0B,iBAAX,GAAiC,MAArC,CAA6C,CAC3CnB,cAAc,GACf,CACF,CAJQ,CAIN,EAJM,CAAT,CAKA,GAAIP,UAAU,CAAC0B,iBAAX,GAAiC,MAArC,CAA6C,CAC3C,mBAAO,oBAAC,iBAAD,EAAmB,IAAI,CAAEvB,IAAzB,CAA+B,GAAG,CAAEA,IAAI,CAACwB,EAAzC,EAAP,CACD,CAFD,IAEO,CACL,mBAAO,oBAAC,OAAD,MAAP,CACD,CACF","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GithubProfileCard from \"../../components/githubProfileCard/GithubProfileCard\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport { openSource } from \"../../portfolio\";\nimport Contact from \"../contact/Contact\";\n\nexport default function Profile() {\n  const [prof, setrepo] = useState([]);\n  function setProfileFunction(array) {\n    setrepo(array);\n  }\n  function getProfileData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n      {\n        user(login:\"${openSource.githubUserName}\") { \n          name\n          bio\n          isHireable\n          avatarUrl\n          location\n        }\n    }\n      `,\n      })\n      .then((result) => {\n        setProfileFunction(result.data.user);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  useEffect(() => {\n    if (openSource.showGithubProfile === \"true\") {\n      getProfileData();\n    }\n  }, []);\n  if (openSource.showGithubProfile === \"true\") {\n    return <GithubProfileCard prof={prof} key={prof.id} />;\n  } else {\n    return <Contact />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}